(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
function rand(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
var Bezier = (function () {
    function Bezier(cp1x, cp1y, cp2x, cp2y, x, y) {
        var vm = this;
        vm.cp1x = cp1x;
        vm.cp1y = cp1y;
        vm.cp2x = cp2x;
        vm.cp2y = cp2y;
        vm.x = x;
        vm.y = y;
    }
    return Bezier;
}());
var Mountain = (function () {
    function Mountain(w, h) {
        var vm = this;
        vm.canvas = document.createElement('canvas');
        vm.canvas.width = w;
        vm.canvas.height = h;
        vm.ctx = vm.canvas.getContext('2d');
        vm.w = w;
        vm.h = h;
        console.dir(vm.canvas);
        vm.left = 0;
        vm.right = w;
        vm.curves = [];
        vm.height = Math.round(h / 2);
        var new_x = 0;
        var new_y = rand(vm.height - 3, vm.height + 3);
        ;
        var slope_y;
        var slope_x;
        var new_slope_x;
        var new_slope_y;
        var tension = 400;
        new_slope_x = new_x + rand(-tension, 0);
        new_slope_y = new_y + rand(-tension, 0);
        vm.curves.push(new Bezier(slope_x, slope_y, new_slope_x, new_slope_y, new_x, new_y));
        while (new_x < 5000) {
            slope_x = 2 * new_x - new_slope_x;
            slope_y = 2 * new_y - new_slope_y;
            new_x += 400;
            new_y += rand(-150, 150);
            new_slope_x = new_x + rand(-tension * 3 / 4, -tension / 8);
            new_slope_y = new_y + rand(-tension, -tension / 2);
            vm.curves.push(new Bezier(slope_x, slope_y, new_slope_x, new_slope_y, new_x, new_y));
        }
        console.log(vm.curves);
    }
    Mountain.prototype.draw = function () {
        var vm = this;
        vm.ctx.beginPath();
        vm.ctx.moveTo(0, vm.height);
        for (var i = 0; i < vm.curves.length; i++) {
            vm.ctx.bezierCurveTo(vm.curves[i].cp1x, vm.curves[i].cp1y, vm.curves[i].cp2x, vm.curves[i].cp2y, vm.curves[i].x, vm.curves[i].y);
        }
        vm.ctx.lineTo(vm.curves[vm.curves.length - 1].x, vm.h);
        vm.ctx.lineTo(-50, vm.h);
        vm.ctx.closePath();
        // vm.ctx.closePath();
        vm.ctx.strokeStyle = "rgba(0,0,0,1)";
        vm.ctx.lineWidth = 1;
        vm.ctx.stroke();
        vm.ctx.fillStyle = "rgba(0,0,0,1)";
        vm.ctx.fill();
    };
    return Mountain;
}());
var App = (function () {
    function App() {
        //Codepen doesn't like generics :'(
        // this.canvas = <HTMLCanvasElement>document.getElementById('canvas');
        var vm = this;
        vm.canvas = document.getElementById('canvas');
        vm.ctx = vm.canvas.getContext('2d');
        vm.sizeCanvas();
        vm.initEvents();
        window.requestAnimationFrame(function (t) { vm.draw(t); });
        console.log(vm);
        vm.mountain = new Mountain(vm.w, vm.h);
        vm.mountain.draw();
        vm.offset = 0;
        vm.ctx.drawImage(vm.mountain.canvas, 0, 0, this.w, this.h);
    }
    App.prototype.sizeCanvas = function () {
        var vm = this;
        this.w = this.canvas.width = window.innerWidth;
        this.h = this.canvas.height = window.innerHeight;
    };
    App.prototype.draw = function (t) {
        var _this = this;
        var vm = this;
        window.requestAnimationFrame(function (t) { _this.draw(t); });
        vm.ctx.clearRect(0, 0, vm.w, vm.h);
        vm.offset += 1;
        vm.mountain.ctx.clearRect(0, 0, 50000, vm.h);
        vm.mountain.draw();
        vm.mountain.ctx.translate(-5, 0);
        vm.ctx.drawImage(vm.mountain.canvas, 0, 0, this.w, this.h);
    };
    App.prototype.initEvents = function () {
        var _this = this;
        window.onresize = function (e) {
            _this.sizeCanvas();
            _this.ctx.drawImage(_this.mountain.canvas, 0, 0, _this.w, _this.h);
        };
    };
    return App;
}());
var app = new App();
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
