(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
function rand(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
var Bezier = (function () {
    function Bezier(cp1x, cp1y, cp2x, cp2y, x, y) {
        var vm = this;
        vm.cp1x = cp1x;
        vm.cp1y = cp1y;
        vm.cp2x = cp2x;
        vm.cp2y = cp2y;
        vm.x = x;
        vm.y = y;
    }
    return Bezier;
}());
var Mountain = (function () {
    function Mountain(w, h, range_min, range_max) {
        var vm = this;
        vm.canvas = document.createElement('canvas');
        vm.canvas.width = w;
        vm.canvas.height = h;
        vm.ctx = vm.canvas.getContext('2d');
        vm.w = w;
        vm.h = h;
        vm.range_min = range_min;
        vm.range_max = range_max;
        vm.left = 0;
        vm.right = w;
        vm.curves = [];
        vm.height = Math.round(h / 2);
        vm.y_pos = rand(0, 4) * 32 * Math.PI / 256;
        vm.x_pos = 0;
        vm.translate = 0;
        vm.n_translated = 1;
        vm.generate_bound = 5000;
        var new_x = 0;
        var new_y = rand(vm.range_min, vm.range_max);
        var slope_y;
        var slope_x;
        var new_slope_x;
        var new_slope_y;
        var tension = 250;
        new_slope_x = new_x + rand(-tension, 0);
        new_slope_y = new_y + rand(-tension, 0);
        vm.curves.push(new Bezier(slope_x, slope_y, new_slope_x, new_slope_y, new_x, new_y));
        vm.generate();
        console.log(vm.curves);
    }
    Mountain.prototype.generate = function () {
        var vm = this;
        var new_x = vm.curves[vm.curves.length - 1].x;
        var new_y = vm.curves[vm.curves.length - 1].y;
        var slope_y;
        var slope_x;
        var new_slope_x = vm.curves[vm.curves.length - 1].cp2x;
        var new_slope_y = vm.curves[vm.curves.length - 1].cp2y;
        ;
        var tension = 250;
        while (new_x < vm.generate_bound * vm.n_translated) {
            slope_x = 2 * new_x - new_slope_x;
            slope_y = 2 * new_y - new_slope_y;
            new_x += rand(35, 40) * 10;
            // new_y += rand(-150, 150);
            // while (new_y > vm.range_min && new_y > vm.range_max) {
            //     new_y += rand(-150, 150);
            // }
            new_slope_x = new_x + rand(-tension * 3 / 4, -tension / 8);
            new_slope_y = new_y + rand(-tension, -tension / 2);
            vm.curves.push(new Bezier(slope_x, slope_y, new_slope_x, new_slope_y, new_x, new_y));
        }
    };
    Mountain.prototype.increment = function (increment) {
        this.translate += increment;
    };
    Mountain.prototype.animate = function () {
        var vm = this;
        for (var i = 0; i < vm.curves.length; i++) {
            vm.curves[i].cp2y += Math.sin(vm.y_pos) * vm.h / 500;
            vm.curves[i].cp1y -= Math.sin(vm.y_pos) * vm.h / 500;
        }
        vm.y_pos += Math.PI / 256;
    };
    Mountain.prototype.conditional = function () {
        var vm = this;
        if (vm.translate > vm.generate_bound - vm.w) {
            vm.translate = 0;
            vm.n_translated++;
            console.log(vm.n_translated * vm.generate_bound);
            vm.generate();
            console.log(vm.curves.length);
        }
    };
    Mountain.prototype.draw = function (color) {
        var vm = this;
        vm.conditional();
        vm.animate();
        vm.ctx.beginPath();
        vm.ctx.moveTo(0, vm.curves[0].y);
        for (var i = 0; i < vm.curves.length; i++) {
            vm.ctx.bezierCurveTo(vm.curves[i].cp1x, vm.curves[i].cp1y, vm.curves[i].cp2x, vm.curves[i].cp2y, vm.curves[i].x, vm.curves[i].y);
        }
        vm.ctx.lineTo(vm.curves[vm.curves.length - 1].x, vm.h);
        vm.ctx.lineTo(-50, vm.h);
        vm.ctx.closePath();
        // vm.ctx.strokeStyle = "rgba(0,0,0,1)";
        // vm.ctx.lineWidth = 1;
        // vm.ctx.stroke();
        var grad = vm.ctx.createLinearGradient(0, vm.curves[0].y - 250, 0, vm.h);
        var opac_color = color.replace(', 1)', ', 0.001)');
        grad.addColorStop(0, opac_color);
        grad.addColorStop(1, color);
        vm.ctx.fillStyle = grad;
        vm.ctx.fill();
    };
    return Mountain;
}());
var App = (function () {
    function App() {
        //Codepen doesn't like generics :'(
        // this.canvas = <HTMLCanvasElement>document.getElementById('canvas');
        var vm = this;
        vm.canvas = document.getElementById('canvas');
        vm.ctx = vm.canvas.getContext('2d');
        vm.sizeCanvas();
        vm.initEvents();
        window.requestAnimationFrame(function (t) { vm.draw(t); });
        console.log(vm);
        vm.mountain = new Mountain(vm.w, vm.h, 2 * vm.h / 16, 2 * vm.h / 16 + 25);
        vm.ctx.drawImage(vm.mountain.canvas, 0, 0, this.w, this.h);
        console.log(vm.mountain.ctx);
        vm.mountain2 = new Mountain(vm.w, vm.h, 6 * vm.h / 16, 6 * vm.h / 16 + 25);
        vm.ctx.drawImage(vm.mountain2.canvas, 0, 0, this.w, this.h);
        vm.mountain3 = new Mountain(vm.w, vm.h, 10 * vm.h / 16, 10 * vm.h / 16 + 25);
        vm.ctx.drawImage(vm.mountain3.canvas, 0, 0, this.w, this.h);
        vm.mountain4 = new Mountain(vm.w, vm.h, 14 * vm.h / 16, 14 * vm.h / 16 + 25);
        vm.ctx.drawImage(vm.mountain3.canvas, 0, 0, this.w, this.h);
    }
    App.prototype.sizeCanvas = function () {
        var vm = this;
        this.w = this.canvas.width = window.innerWidth;
        this.h = this.canvas.height = window.innerHeight;
    };
    App.prototype.draw = function (t) {
        var _this = this;
        var vm = this;
        window.requestAnimationFrame(function (t) { _this.draw(t); });
        vm.ctx.clearRect(0, 0, vm.w, vm.h);
        vm.ctx.fillStyle = "rgba(29,98,255, 1)";
        vm.ctx.fill();
        vm.ctx.fillRect(0, 0, vm.w, vm.h);
        vm.mountain.ctx.clearRect(0, 0, 50000, vm.h);
        vm.mountain.draw("rgba(10, 171, 232, 1)");
        vm.mountain.ctx.translate(-1, 0);
        vm.mountain.increment(1);
        vm.ctx.drawImage(vm.mountain.canvas, 0, 0, this.w, this.h);
        vm.mountain2.ctx.clearRect(0, 0, 50000, vm.h);
        vm.mountain2.draw("rgba(2, 255, 216, 1)");
        vm.mountain2.ctx.translate(-0.8, 0);
        vm.mountain2.increment(0.8);
        vm.ctx.drawImage(vm.mountain2.canvas, 0, 0, this.w, this.h);
        vm.mountain3.ctx.clearRect(0, 0, 50000, vm.h);
        vm.mountain3.draw("rgba(2, 255, 111, 1)");
        vm.mountain3.ctx.translate(-1.8, 0);
        vm.mountain3.increment(1.8);
        vm.ctx.drawImage(vm.mountain3.canvas, 0, 0, this.w, this.h);
        vm.mountain4.ctx.clearRect(0, 0, 50000, vm.h);
        vm.mountain4.draw("rgba(27, 255, 11, 1)");
        vm.mountain4.ctx.translate(-1.2, 0);
        vm.mountain4.increment(1.2);
        vm.ctx.drawImage(vm.mountain4.canvas, 0, 0, this.w, this.h);
    };
    App.prototype.initEvents = function () {
        var _this = this;
        window.onresize = function (e) {
            _this.sizeCanvas();
            _this.ctx.drawImage(_this.mountain.canvas, 0, 0, _this.w, _this.h);
        };
    };
    return App;
}());
var app = new App();
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
