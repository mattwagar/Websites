{"version":3,"sources":["myFIrstThreeJS.ts"],"names":[],"mappings":"AAAA,+DAA+D;AAE/D;IAII,cAAY,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;QAClD,IAAM,EAAE,GAAG,IAAI,CAAC;QAChB,EAAE,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7C,EAAE,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QACxD,EAAE,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;IACzD,CAAC;IACL,WAAC;AAAD,CAVA,AAUC,IAAA;AAGD;IAMI;QACI,IAAM,EAAE,GAAG,IAAI,CAAC;QAEhB,qBAAqB;QAErB,EAAE,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;QAC7B,EAAE,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,iBAAiB,CAAC,EAAE,EAAE,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAC/F,EAAE,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC;QACxC,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QAC3D,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAElD,QAAQ;QAER,SAAS;QAET,EAAE,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;QAGtC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAG7B,iBAAiB;QAEjB,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAEzB,8BAA8B;QAC9B,MAAM,CAAC,qBAAqB,CAAC,UAAC,CAAC,IAAO,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;IACD,uBAAI,GAAJ,UAAK,CAAM;QAAX,iBASC;QARG,IAAM,EAAE,GAAG,IAAI,CAAC;QAChB,MAAM,CAAC,qBAAqB,CAAC,UAAC,CAAC,IAAO,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvD,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7B,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7B,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE7B,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;IACL,eAAC;AAAD,CA5CA,AA4CC,IAAA;AAED,IAAM,CAAC,GAAG,IAAI,QAAQ,EAAE,CAAC","file":"myFIrstThreeJS.js","sourcesContent":["/// <reference path=\"../../typings/globals/three/three.d.ts\" />\r\n\r\nclass Cube{\r\n    geometry: THREE.BoxGeometry; \r\n    material: THREE.MeshBasicMaterial;\r\n    object: THREE.Mesh;\r\n    constructor(x: number, y: number, z: number, c: number) {\r\n        const vm = this;\r\n        vm.geometry = new THREE.BoxGeometry(x, y, z);\r\n        vm.material = new THREE.MeshBasicMaterial({ color: c });\r\n        vm.object = new THREE.Mesh(vm.geometry, vm.material);\r\n    }\r\n}\r\n\r\n\r\nclass Renderer {\r\n    scene: THREE.Scene;\r\n    camera: THREE.Camera;\r\n    renderer: THREE.WebGLRenderer;\r\n    cube: Cube;\r\n\r\n    constructor() {\r\n        const vm = this;\r\n\r\n        //setting up renderer\r\n\r\n        vm.scene = new THREE.Scene();\r\n        vm.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        vm.renderer = new THREE.WebGLRenderer();\r\n        vm.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        document.body.appendChild(vm.renderer.domElement);\r\n\r\n        //lights\r\n\r\n        //objects\r\n\r\n        vm.cube = new Cube(1, 1, 1, 0xff00ff);\r\n\r\n        \r\n        vm.scene.add(vm.cube.object);\r\n\r\n\r\n        //camera settings\r\n\r\n        vm.camera.position.z = 5;\r\n\r\n        //initial functions and events\r\n        window.requestAnimationFrame((t) => { vm.draw(t); });\r\n    }\r\n    draw(t: any) {\r\n        const vm = this;\r\n        window.requestAnimationFrame((t) => { this.draw(t); });\r\n        \r\n        vm.cube.object.rotateX(0.02);\r\n        vm.cube.object.rotateY(0.03);\r\n        vm.cube.object.rotateZ(0.05);\r\n\r\n        vm.renderer.render(vm.scene, vm.camera);\r\n    }\r\n}\r\n\r\nconst r = new Renderer();"],"sourceRoot":"/source/"}